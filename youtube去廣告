// ==UserScript==
// @name         YouTube去廣告 YouTube AD Blocker
// @name:zh-TW   YouTube去廣告
// @namespace    https://github.com/anrhur/google-/tree/main
// @version      6.09
// @description         這是一個去除YouTube廣告的腳本，輕量且高效，它能絲滑的去除界面廣告和視頻廣告，包括6s廣告。This is a script that removes ads on YouTube, it's lightweight and efficient, capable of smoothly removing interface and video ads, including 6s ads.
// @description:zh-TW   這是一個去除YouTube廣告的腳本，輕量且高效，它能絲滑地去除界面廣告和視頻廣告，包括6s廣告。
// @author       iamfugui
// @match        *://*.youtube.com/*
// @exclude      *://accounts.youtube.com/*
// @exclude      *://www.youtube.com/live_chat_replay*
// @exclude      *://www.youtube.com/persist_identity*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=YouTube.com
// @grant        none
// @license MIT
// @downloadURL https://update.greasyfork.org/scripts/459541/YouTube%E5%8E%BB%E5%B9%BF%E5%91%8A.user.js
// @updateURL https://update.greasyfork.org/scripts/459541/YouTube%E5%8E%BB%E5%B9%BF%E5%91%8A.meta.js
// ==/UserScript==
(function() {
    `use strict`;
    //界面廣告選擇器
    const cssSelectorArr = [
        `#masthead-ad`,//首頁頂部橫幅廣告.
        `ytd-rich-item-renderer.style-scope.ytd-rich-grid-row #content:has(.ytd-display-ad-renderer)`,//首頁視頻排版廣告.
        `.video-ads.ytp-ad-module`,//播放器底部廣告.
        `tp-yt-paper-dialog:has(yt-mealbar-promo-renderer)`,//播放頁會員促銷廣告.
        `ytd-engagement-panel-section-list-renderer[target-id="engagement-panel-ads"]`,//播放頁右上方推薦廣告.
        `#related #player-ads`,//播放頁評論區右側推廣廣告.
        `#related ytd-ad-slot-renderer`,//播放頁評論區右側視頻排版廣告.
        `ytd-ad-slot-renderer`,//搜索頁廣告.
        `yt-mealbar-promo-renderer`,//播放頁會員推薦廣告.
        //`tp-yt-iron-overlay-backdrop[style*="z-index: 2201;"]`,//會員攔截廣告
        `ytd-popup-container:has(a[href="/premium"])`,//會員攔截廣告
        `ad-slot-renderer`,//M播放頁第三方推薦廣告
        `ytm-companion-ad-renderer`,//M可跳過的視頻廣告鏈接處
    ];

    window.dev=false;//開發使用

    /**
    * 將標準時間格式化
    * @param {Date} time 標準時間
    * @param {String} format 格式
    * @return {String}
    */
    function moment(time) {
        // 獲取年⽉⽇時分秒
        let y = time.getFullYear()
        let m = (time.getMonth() + 1).toString().padStart(2, `0`)
        let d = time.getDate().toString().padStart(2, `0`)
        let h = time.getHours().toString().padStart(2, `0`)
        let min = time.getMinutes().toString().padStart(2, `0`)
        let s = time.getSeconds().toString().padStart(2, `0`)
        return `${y}-${m}-${d} ${h}:${min}:${s}`
    }

    /**
    * 輸出信息
    * @param {String} msg 信息
    * @return {undefined}
    */
    function log(msg) {
        if(!window.dev){
            return false;
        }
        console.log(window.location.href);
        console.log(`${moment(new Date())}  ${msg}`);
    }

    /**
    * 設置運行標志
    * @param {String} name
    * @return {undefined}
    */
    function setRunFlag(name){
        let style = document.createElement(`style`);
        style.id = name;
        (document.head || document.body).appendChild(style);//將節點附加到HTML.
    }

    /**
    * 獲取運行標志
    * @param {String} name
    * @return {undefined|Element}
    */
    function getRunFlag(name){
        return document.getElementById(name);
    }

    /**
    * 檢查是否設置了運行標志
    * @param {String} name
    * @return {Boolean}
    */
    function checkRunFlag(name){
        if(getRunFlag(name)){
            return true;
        }else{
            setRunFlag(name)
            return false;
        }
    }

    /**
    * 生成去除廣告的css元素style並附加到HTML節點上
    * @param {String} styles 樣式文本
    * @return {undefined}
    */
    function generateRemoveADHTMLElement(id) {
        //如果已經設置過,退出.
        if (checkRunFlag(id)) {
            log(`屏蔽頁面廣告節點已生成`);
            return false
        }

        //設置移除廣告樣式.
        let style = document.createElement(`style`);//創建style元素.
        (document.head || document.body).appendChild(style);//將節點附加到HTML.
        style.appendChild(document.createTextNode(generateRemoveADCssText(cssSelectorArr)));//附加樣式節點到元素節點.
        log(`生成屏蔽頁面廣告節點成功`);
    }

    /**
    * 生成去除廣告的css文本
    * @param {Array} cssSelectorArr 待設置css選擇器數組
    * @return {String}
    */
    function generateRemoveADCssText(cssSelectorArr){
        cssSelectorArr.forEach((selector,index)=>{
            cssSelectorArr[index]=`${selector}{display:none!important}`;//遍歷並設置樣式.
        });
        return cssSelectorArr.join(` `);//拼接成字符串.
    }

    /**
    * 觸摸事件
    * @return {undefined}
    */
    function nativeTouch(){
        // 創建 Touch 對象
        let touch = new Touch({
            identifier: Date.now(),
            target: this,
            clientX: 12,
            clientY: 34,
            radiusX: 56,
            radiusY: 78,
            rotationAngle: 0,
            force: 1
        });

        // 創建 TouchEvent 對象
        let touchStartEvent = new TouchEvent(`touchstart`, {
            bubbles: true,
            cancelable: true,
            view: window,
            touches: [touch],
            targetTouches: [touch],
            changedTouches: [touch]
        });

        // 分派 touchstart 事件到目標元素
        this.dispatchEvent(touchStartEvent);

        // 創建 TouchEvent 對象
        let touchEndEvent = new TouchEvent(`touchend`, {
            bubbles: true,
            cancelable: true,
            view: window,
            touches: [],
            targetTouches: [],
            changedTouches: [touch]
        });

        // 分派 touchend 事件到目標元素
        this.dispatchEvent(touchEndEvent);
    }

    /**
    * 跳過廣告
    * @return {undefined}
    */
    function skipAd(mutationsList, observer) {
        let video = document.querySelector(`.ad-showing video`) || document.querySelector(`video`);//獲取視頻節點
        let skipButton = document.querySelector(`.ytp-ad-skip-button`) || document.querySelector(`.ytp-skip-ad-button`) || document.querySelector(`.ytp-ad-skip-button-modern`);
        let shortAdMsg = document.querySelector(`.video-ads.ytp-ad-module .ytp-ad-player-overlay`) || document.querySelector(`.ytp-ad-button-icon`);

        //定時器執行，移除YT攔截器並播放
        const premiumContainers = [...document.querySelectorAll(`ytd-popup-container`)];
        const matchingContainers = premiumContainers.filter(container => container.querySelector(`a[href="/premium"]`));
        if (matchingContainers.length > 0 && video.paused && !(skipButton || shortAdMsg)) {//先移除廣告再恢覆播放
            // 獲取元素
            var elements = document.querySelectorAll('tp-yt-iron-overlay-backdrop[style*="z-index:2201;"]');
            elements.forEach(function(element) {
                element.className = ''; // 清除所有類
                log(`關閉遮罩層`);
            });

            matchingContainers.forEach(container => container.remove());
            video.play();
            log(`移除YT攔截器並播放`);
        }


        if((skipButton || shortAdMsg) && window.location.href.indexOf("https://m.youtube.com/") === -1){ //移動端靜音有bug
            video.muted = true;
            video.playbackRate = 16;
            video.play();
            log(`調速~~~~~~~~~~~~~`);
        }

        if(skipButton){
            if(video.currentTime>0.5){
                video.currentTime = video.duration;//強制
                log(`特殊賬號跳過按鈕廣告~~~~~~~~~~~~~`);
                return;
            }
            skipButton.click();//PC
            nativeTouch.call(skipButton);//Phone
            log(`按鈕跳過廣告~~~~~~~~~~~~~`);
        }else if(shortAdMsg && video.currentTime>0.5){
            video.currentTime = video.duration;//強制
            log(`強制結束了該廣告`);
        }

    }

    /**
    * 去除播放中的廣告
    * @return {undefined}
    */
    function removePlayerAD(id){
        //如果已經在運行,退出.
        if (checkRunFlag(id)) {
            log(`去除播放中的廣告功能已在運行`);
            return false
        }
        let observer;//監聽器
        let timerID;//定時器

        //開始監聽
        function startObserve(){
            //廣告節點監聽
            const targetNode = document.querySelector(`.video-ads.ytp-ad-module`);
            if(!targetNode){
                log(`正在尋找待監聽的目標節點`);
                return false;
            }
            //監聽視頻中的廣告並處理
            const config = {childList: true, subtree: true };// 監聽目標節點本身與子樹下節點的變動
            observer = new MutationObserver(skipAd);// 創建一個觀察器實例並設置處理廣告的回調函數
            observer.observe(targetNode, config);// 以上述配置開始觀察廣告節點
            timerID=setInterval(skipAd, 500);//漏網魚
        }

        //輪詢任務
        let startObserveID = setInterval(()=>{
            if(observer && timerID){
                clearInterval(startObserveID);
            }else{
                startObserve();
            }
        },16);

        log(`運行去除播放中的廣告功能成功`);
    }

    /**
    * main函數
    */
    function main(){
        generateRemoveADHTMLElement(`removeADHTMLElement`);//移除界面中的廣告.
        removePlayerAD(`removePlayerAD`);//移除播放中的廣告.
    }

    if (document.readyState === `loading`) {
        log(`YouTube去廣告腳本即將調用:`);
        document.addEventListener(`DOMContentLoaded`, main);// 此時加載尚未完成
    } else {
        log(`YouTube去廣告腳本快速調用:`);
        main();// 此時`DOMContentLoaded` 已經被觸發
    }

})();
